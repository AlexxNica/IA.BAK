#!/bin/sh
set -e

shard="$(echo "$1" | tr A-Z a-z)"
if [ -z "$shard" ]; then
	echo "Usage: checkoutshard shardN" >&2
	exit 1
fi

PATH=$(pwd)/git-annex.linux:$PATH
export PATH

top="$(pwd)"

checkssh () {
	repourl="$1"
	
	if [ ! -e id_rsa ]; then
		ssh-keygen -q  -P "" -t rsa -f ./id_rsa
	fi
	
	user="$(echo "$repourl" | cut -d : -f 1)"
	dir="$(echo "$repourl" | cut -d : -f 2)"

	echo "Checking ssh to server at $repourl..."
	if ! ssh -i id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no "$user" git-annex-shell -c configlist "$dir"; then
		echo "Seem you have not signed up for access to $repourl yet. Let's fix that.."
		echo "** Go on IRC #internetarchive.bak and ask to sign up. **"
		echo "Paste the following ssh public key when asked:"
		echo "------------------>8----------------------"
		cat id_rsa.pub
		echo "------------------>8----------------------"
		printf "Hit Enter once you're signed up! "
		read l
		checkssh "$repourl"
	fi
}

l=$(grep "^$shard " repolist)
if [ -z "$l" ]; then
	echo "Shard not found in repolist" >&2
	exit 1
fi
set -- $l
localdir="$1"
repourl="$2"
status="$3"

checkssh "$repourl"

# This is slightly weird way to clone, but it allows using our
# dedicated ssh key without installing it in ~/.ssh/
git init "$localdir"
cd "$localdir"
git config user.name "$(whoami)"
git config user.email "$(whoami)@iabak"
git config gc.auto 0
git annex init
cp -a ../id_rsa .git/annex/id_rsa
cp -a ../id_rsa.pub .git/annex/id_rsa.pub
git remote add origin "$repourl"
git config remote.origin.annex-ssh-options "-i .git/annex/id_rsa"
git annex sync

# Copy over any user configuration from a previous shard.
cd "$top"
prevshard="$(find . -maxdepth 1 -name shard\* -type d -printf "%P\n" | head -n 1)"
if [ -n "$prevshard" ]; then
	for c in annex.diskreserve annex.web-options; do
		val="$(cd "$prevshard" && git config "$c" || true)"
		if [ -n "$val" ]; then
			(cd "$localdir" && git config "$c" "$val")
		fi
	done
fi

echo "Checked out $localdir for $shard (from $repourl). Current status: $status"
