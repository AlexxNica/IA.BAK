#!/bin/sh
set -e

NUMCOPIES=4

echo "Welcome to iabak version 0.1"
echo "ALPHA TEST, use with caution"
echo

PATH=$(pwd)/git-annex.linux:$PATH
export PATH

if FLOCK=$(which flock); then
	FLOCK="${FLOCK} -x -n"
else
	FLOCK=$(readlink -f ./flock.pl)
fi

download () {
	git annex sync
	periodicsync &

	echo "Here goes! Downloading from Internet Archive."
	echo "(This can be safely interrupted at any time with ctrl-C)"
	echo "(Also, you can safely run more than one of these at a time, to use more bandwidth!)"
	echo ""
	if rundownloaddirs; then
		git annex sync
		echo
		echo "Wow! I'm done downloading this shard of the IA!"
	else
		git annex sync
		echo 
		echo "Download finished, but the backup of this shard is not fully complete."
		echo "Some files may have failed to download, or all allocated disk space is in use."
	fi
}

rundownloaddirs () {
	if [ ! -e ../NOSHUF ] && [ -x /usr/bin/shuf ]; then
		echo "(Oh good, you have shuf(1)! Randomizing order.. Will take a couple minutes..)"
		git annex find --print0 --not --copies "$NUMCOPIES" | xargs --no-run-if-empty -0 dirname -z -- | uniq -z | shuf -z | xargs --no-run-if-empty -n 100 -0 git -c annex.alwayscommit=false annex get --
	else
		git annex get --not --copies "$NUMCOPIES"
	fi
}

rundownloadfiles () {
	echo "Checking for any files that still need to be downloaded..."
	if [ ! -e ../NOSHUF ] && [ -x /usr/bin/shuf ]; then
		# don't use dirname here, because in maint mode,
		# only 1 file from a dir might go missing and we 
		# don't want to download the whole dir then
		git annex find --print0 --not --copies "$NUMCOPIES" | shuf -z | xargs --no-run-if-empty -n 100 -0 git -c annex.alwayscommit=false annex get --
	else
		git annex get --not --copies "$NUMCOPIES"
	fi
}

fsckme () {
	set +e
	${FLOCK} .git/annex/fullfsck.lock git annex fsck --incremental-schedule 30d --time-limit 5h
	fsckresult=$?
	set -e
	if [ "$fsckresult" -eq 101 ]; then
		echo "Incremental full fsck ran out of time, will continue it next run."
	fi
}

fastfsck () {
	${FLOCK} .git/annex/fastfsck.lock git annex fsck --fast --in here --quiet >/dev/null 2>/dev/null || true
	git annex sync
}

maint () {
	echo "This shard is in maintenance mode; checking it."
	fsckme

	git annex sync
	periodicsync &
	if rundownloadfiles; then
		git annex sync
		echo ""
		echo "This shard remains in good shape!"
	else
		git annex sync
		echo 
		echo "Could not fully maintain this shard."
		echo "Some files may have failed to download, or all allocated disk space is in use."
	fi
}

periodicsync () {
	${FLOCK} .git/annex/iasyncer.lock ../iabak-hourlysync || true
}

setup () {
	echo ""
	df -h .
	echo "How much of this disk space do you want to keep free, and not use for IA backup?"
	echo "(You can free up space at any time.)"
	echo "To use entire disk, just hit Enter, or type in something like"
	echo "200G or 1T"
	printf "keep free> "
	read reserve
	if [ -n "$reserve" ]; then
		if which numfmt && [ $(df -Ph . | tail -1 | awk '{print $4}' | numfmt --from=si) -lt $(echo $reserve | numfmt --from=si) ]; then
			echo "not enough diskspace to reserve"
			setup
		else
			git config annex.diskreserve "$reserve"
		fi
	fi
}

installgitannex () {
	${FLOCK} .iabak-install-git-annex ./install-git-annex || true
}

handleshard () {
	shard="$1"

	echo
	echo "========= $shard ========="
	echo
	
	l="$(grep "^$shard " repolist | head -n 1)"
	set -- $l
	state="$3"

	cd "$shard"
	case "$state" in
		active)
			download
		;;
		reserve)
			download
		;;
		maint)
			maint
		;;
		restore)
			echo "TODO: upload" >&2
		;;
		*)
			echo "unknown state $state for shard $shard" >&2
		;;
	esac
}

# Order with newest checked out shards first.
sharddirs () {
	find . -maxdepth 1 -name shard\* -type d -printf '%C@ %P\n' | sort -rn | cut -d ' ' -f 2
}

randomactive () {
	grep " active$" repolist | cut -d ' ' -f 1 | perl -e '@l=<>; print $l[rand @l]'
}

if [ -n "$(sharddirs)" ]; then
	installgitannex

	# First do a fast fsck of all shards, in order to detect
	# obvious problems, and report in that we still have the data
	# we said we have.
	for d in $(sharddirs); do
		echo "Doing a fast fsck of $d ..."
		(cd "$d" && fastfsck)
	done
	
	# move clients on to next shard. TODO: dehardcode
	if ! [ -e NOMORE ]; then
		./checkoutshard shard2
	fi

	# Now the expensive processing of each shard.
	for d in $(sharddirs); do
		( handleshard "$d" )
	done
else
	localdir="$(randomactive)"
	if [ -z "$localdir" ]; then
		echo "No active shards are currently available. Please try again later!" >&2
		exit 1
	fi

	echo "Looks like this is a new IA backup. I'm going to put it in"
	echo "$(pwd)/$localdir"
	echo "This will use some disk space. :)"
	printf "Press Enter to confirm, or ctrl-C to cancel."
	read confirm

	installgitannex
	./checkoutshard "$localdir"
	cd "$localdir"
	setup
	periodicsync &
	download
fi
