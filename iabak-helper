#!/bin/sh
set -e

NUMCOPIES=4

echo "Welcome to iabak version 0.1"
echo "ALPHA TEST, use with caution"
echo

PATH=$(pwd)/git-annex.linux:$PATH
export PATH

download () {
	echo "Here goes! Downloading from Internet Archive."
	echo "(This can be safely interrupted at any time with ctrl-C)"
	echo "(Also, you can safely run more than one of these at a time, to use more bandwidth!)"
	echo ""
	if rundownload; then
		git annex sync
		echo
		echo "Wow! I'm done downloading this shard of the IA!"
	else
		git annex sync
		echo 
		echo "Download finished, but the backup of this shard is not fully complete."
		echo "Some files may have failed to download, or all allocated disk space is in use."
	fi
}

rundownload () {
	if [ ! -e ../NOSHUF ] && [ -x /usr/bin/shuf ]; then
		echo "(Oh good, you have shuf(1)! Randomizing order.. Will take a couple minutes..)"
		git annex find --print0 --not --copies "$NUMCOPIES" | xargs --no-run-if-empty -0 dirname -z -- | uniq -z | shuf -z | xargs --no-run-if-empty -n 100 -0 git -c annex.alwayscommit=false annex get --
	else
		git annex get --not --copies "$NUMCOPIES"
	fi
}

periodicsync () {
	git annex sync
	flock -x -n .git/annex/iasyncer.lock ../iabak-hourlysync || true
}

setup () {
	echo ""
	df -h .
	echo "How much of this disk space do you want to keep free, and not use for IA backup?"
	echo "(You can free up space at any time.)"
	echo "To use entire disk, just hit Enter, or type in something like"
	echo "200GB or 1TB"
	printf "keep free> "
	read reserve
	if [ -n "$reserve" ]; then
		if which numfmt && [ $(df -Ph . | tail -1 | awk '{print $4}' | numfmt --from=si) -lt $(echo $reserve | numfmt --from=si) ]; then
			echo "not enough diskspace to reserve"
			setup
		else
			git config annex.diskreserve "$reserve"
		fi
	fi
}

installgitannex () {
	if [ -d git-annex.linux ]; then
		# if an installed version exists, check the version-number
		installedVersion=$(./git-annex.linux/git-annex version | grep "version" -m 1 | sed 's/^.*\([0-9]\+\)\.\([0-9]\{8\}\).*$/\2/' | tr '\n' ' ')
		newVersion=$(wget https://downloads.kitenet.net/git-annex/linux/current/git-annex-standalone-i386.tar.gz.info -o /dev/null -O - | sed 's/.*distributionReleasedate = \([0-9]\{4\}\)-\([0-9]\{2\}\)-\([0-9]\{2\}\).*UTC,.*/\1\2\3/' | tr '\n' ' ')
		if [ "$installedVersion" -lt "$newVersion" ]; then
			rm -rf git-annex.linux
		fi
	fi

	if [ ! -d git-annex.linux ]; then
		echo "Installing a recent version of git-annex ..."
		rm -f git-annex-standalone-i386.tar.gz
		wget https://downloads.kitenet.net/git-annex/linux/current/git-annex-standalone-i386.tar.gz
		tar xf git-annex-standalone-i386.tar.gz
		rm -f git-annex-standalone-i386.tar.gz
		echo "Installed in $(pwd)/git-annex.linux"
		echo
	fi
}

handleshard () {
	shard="$1"

	echo "========= $shard ========="
	
	l="$(grep "^$shard " repolist | head -n 1)"
	set -- $l
	state="$3"

	cd "$shard"
	case state of
		active)
		reserve)
		restore)
			periodicsync &
			download
		;;
		maint)
			periodicsync &
			rundownload
			# disabled until we're ready to start fscking
			#git annex fsck
		;;
		*)
			echo "unknown state $state for shard $shard" >&2
		;;
	esac
}

# Order with newest checked out shards first.
sharddirs="$(find . -maxdepth 1 -name shard\* -type d -printf '%C@ %p\n' | sort -rn | cut -d ' ' -f 2)"

if [ -n "$sharddirs" ]; then
	installgitannex
	for d in $sharddirs; do
		( handleshard "$d" )
	done
else
	localdir="$(grep " active$" repolist | head -n 1 | cut -d ' ' -f 1)"
	if [ -z "$localdir" ]; then
		echo "No active shards are currently available. Please try again later!" >&2
		exit 1
	fi

	echo "Looks like this is a new IA backup. I'm going to put it in"
	echo "$(pwd)/$localdir"
	echo "This will use some disk space. :)"
	printf "Press Enter to confirm, or ctrl-C to cancel."
	read confirm

	installgitannex
	./checkoutshard "$localdir"
	cd "$localdir"
	setup
	periodicsync &
	download
fi
